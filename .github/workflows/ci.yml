name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  test:
    name: Test & Build
    runs-on: ubuntu-latest
    env:
      NODE_OPTIONS: "--max-old-space-size=4096"

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20' # Within engines range: >=18 <21
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Check environment template
        run: |
          if [ ! -f ".env.example" ]; then
            echo "❌ .env.example missing"
            exit 1
          fi
          echo "✅ .env.example exists"

      - name: Generate Prisma client
        run: npm run prisma:generate
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test
          DIRECT_URL: postgresql://postgres:postgres@localhost:5432/test

      - name: Validate Prisma schema
        run: npx prisma validate
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test
          DIRECT_URL: postgresql://postgres:postgres@localhost:5432/test

      - name: Run linter
        run: npm run lint

      - name: Build application
        run: npm run build

      - name: Run tests with coverage
        run: npm run test:cov -- --ci
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test
          DIRECT_URL: postgresql://postgres:postgres@localhost:5432/test
          JWT_SECRET: test-secret-for-ci-minimum-32-characters-long
          JWT_REFRESH_SECRET: test-refresh-secret-for-ci-minimum-32-characters
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          NODE_ENV: test

      - name: Check coverage threshold
        run: |
          echo "📊 Checking coverage thresholds..."
          npm run test:cov -- --ci --silent
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test
          DIRECT_URL: postgresql://postgres:postgres@localhost:5432/test
          JWT_SECRET: test-secret-for-ci-minimum-32-characters-long
          JWT_REFRESH_SECRET: test-refresh-secret-for-ci-minimum-32-characters
          REDIS_HOST: localhost
          REDIS_PORT: 6379

      - name: Run contract tests
        run: npm test -- test/contracts
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  build-docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: fork-knife-backend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  contract-validation:
    name: Validate POS Contracts
    runs-on: ubuntu-latest
    env:
      NODE_OPTIONS: "--max-old-space-size=4096"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Validate JSON schemas
        run: |
          node -e "
          const Ajv = require('ajv');
          const addFormats = require('ajv-formats');
          const fs = require('fs');
          const path = require('path');
          
          const ajv = new Ajv();
          addFormats(ajv);
          
          const schemaFiles = fs.readdirSync('contracts/pos/').filter(f => f.endsWith('.schema.json'));
          for (const file of schemaFiles) {
            const schema = JSON.parse(fs.readFileSync(path.join('contracts/pos', file), 'utf8'));
            const validate = ajv.compile(schema);
            console.log(\`✅ \${file} is valid\`);
          }
          console.log('✅ All POS contract schemas are valid');
          "

      - name: Run contract tests
        run: npm test -- test/contracts

